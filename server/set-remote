#!/usr/bin/python3.4

import sys, subprocess

if len(sys.argv) != 3 and len(sys.argv) != 4:
  print ("Bad number of arguments", file=sys.stderr, flush=True)
  exit (1)

username = sys.argv[1]
password = sys.argv[2]
nrip     = sys.argv[3] if len(sys.argv) == 4 else None

vardir = '/var/lib/rf-dyn-ipip'
tunlis = vardir + '/tunnels.lis'
tundir = vardir + '/clients.d'

class AuthError (Exception):
  def __init__(self, value):
    self.value = value
  def __str__(self):
    return repr(self.value)


def get_file_entry (file, idx, filter):
  for data in open (file, 'r'):
    ret = data.rstrip().split (' ')
    if (len (ret) > idx) and (ret[idx] == filter):
      return ret
  raise AuthError (filter)

def inc_ip (ip):
  a = ip.split ('.')
  a[3] = int (a[3]) + 1

  return '%s.%s.%s.%d' % tuple (a)

def exec_cmd (cmd):
  r = subprocess.check_output (cmd, shell=True, stderr=subprocess.STDOUT)

try:
  (ipip, username, net, ilip) = get_file_entry (tunlis, 1, username)
  irip = inc_ip (ilip)

  tuncfgfile = tundir + '/' + username + '.conf'

  (orip, password) = get_file_entry (tuncfgfile, 1, password)

  if nrip != None and nrip != orip:
    exec_cmd ('ip tunnel change %s remote %s' % (ipip, nrip))
    open (tuncfgfile, 'w').write ('%s %s\n' % (nrip, password))

  print (   'status=OK\npubnet=%s\niplocal=%s\nipremote=%s' \
          % (net, ilip, irip))

except AuthError:
  print ('status=Authentication error', file=sys.stderr)
  exit (1)
except subprocess.CalledProcessError:
  print ('status=Peer IP address cannot be set', file=sys.stderr)
  exit (1)
