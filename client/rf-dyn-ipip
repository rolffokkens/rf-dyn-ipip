#!/usr/bin/python3

import requests, time, signal, os, subprocess, sys, netifaces, ipaddress


def exec_cmd (cmd):
  r = subprocess.check_output (cmd, shell=True, stderr=subprocess.STDOUT)


class SetLocalIPFailure (Exception):
  def __init__(self, value):
    self.value = value
  def __str__(self):
    return repr(self.value)


class ConfigError (Exception):
  def __init__(self, value):
    self.value = value
  def __str__(self):
    return repr(self.value)


class PosixSigHUP (Exception):
  def __init__(self, value):
    self.value = value
  def __str__(self):
    return repr(self.value)


def sighup_handler (signum, frame):
    raise PosixSigHUP (signum)


def read_config (filename):
  try:
    ret = {}
    for l in open (filename, "r"):
      l = l.split ('#')[0].rstrip ()
      if l == '':
        continue
      i = l.split('=')
      if len (i) != 2:
        continue
      ret[i[0]]=i[1]
    return ret
  except FileNotFoundError:
    raise ConfigError ('Unable to open config file "%s"' % filename)


def check_tun_addr (dev, ipver, local, peer):
  map_pfx2str = { 4: (32,  ipaddress.IPv4Address._prefix_from_ip_string, netifaces.AF_INET )
                , 6: (128, ipaddress.IPv6Address._prefix_from_ip_string, netifaces.AF_INET6) }

  (pfx, pfx2str, af) = map_pfx2str[ipver]

  try:
    ifaddr   = netifaces.ifaddresses(dev)[af]
  except ValueError:
    raise SetLocalIPFailure ('Bad IPv%d device %s' % (ipver, dev))

  for addr in ifaddr:
    if ipaddress.ip_address (addr['addr']) != ipaddress.ip_address (local):
      continue

    a_pfx = pfx2str (addr['netmask'])

    if 'peer' in addr:
      if    ipaddress.ip_address(addr['peer']) != ipaddress.ip_address(peer) \
         or a_pfx != pfx:
        raise SetLocalIPFailure ('Bad peer IPv%d address/prefix on %s' % (ipver, dev))
    else:
      if a_pfx != pfx - 1:
        raise SetLocalIPFailure ('Bad IPv%d address/prefix on %s' % (ipver, dev))

    return

  raise SetLocalIPFailure ('Missing IPv4 address %s on %s' % (local, dev))


def register_endpoint (regurl, username, password, ip4device, ip6device):
  payload  = {'password': password}
  url      = regurl + '?id=' + username

  (gw,dev) = netifaces.gateways()['default'][netifaces.AF_INET]
  addr     = netifaces.ifaddresses(dev)[netifaces.AF_INET][0]['addr']

  try:
    r = requests.post(url, data=payload, timeout=1)
  except requests.exceptions.ConnectTimeout:
    raise SetLocalIPFailure ('Failure accessing "%s": Connect timeout' % url)
  except requests.exceptions.ReadTimeout:
    raise SetLocalIPFailure ('Failure accessing "%s": Read timeout' % url)
  except requests.exceptions.ConnectionError:
    raise SetLocalIPFailure ('Failure accessing "%s": Failed to connect' % url)

  if r.status_code != 200:
    raise SetLocalIPFailure ('Failure accessing "%s": Status %d' % (url, r.status_code))

  ret = {}

  for l in r.text.split('\n'):
    i = l.split('=')
    if len (i) != 2:
      continue
    ret[i[0]]=i[1]

  if 'status' not in ret:
    raise SetLocalIPFailure ('"status" missing in data')

  if ret['status'] != 'OK':
    raise SetLocalIPFailure (ret['status'])

  tunnelip  = ret.get('tunnelip')
  ip4local  = ret.get('ip4local')
  ip4remote = ret.get('ip4remote')
  ip6local  = ret.get('ip6local')
  ip6remote = ret.get('ip6remote')

  # ifaddr   = netifaces.ifaddresses(ip4device)[netifaces.AF_INET]
  check_tun_addr (ip4device, 4, ip4local, ip4remote)

  # ifaddr   = netifaces.ifaddresses(ip6device)[netifaces.AF_INET6]
  check_tun_addr (ip6device, 6, ip6local, ip6remote)

  exec_cmd ('ip tunnel change %s local %s remote %s\n' % (ip4device, addr, tunnelip))
  exec_cmd ('ip tunnel change %s local %s remote %s\n' % (ip6device, addr, tunnelip))

  try:
    exec_cmd ('ip route del %s' % tunnelip)
  except subprocess.CalledProcessError:
    pass
  exec_cmd ('ip route add %s via %s' % (tunnelip, gw))

  print ("Local IP registration succeeded", file=sys.stderr, flush=True)

  return (ip4local, ip4remote, ip6local, ip6remote)


def do_ping (version, src_ip, dst_ip):
  try:
    r = subprocess.check_output ('ping' + version + ' -W 1 -c 1 -I ' + src_ip + ' ' + dst_ip, shell = True)
    return True
  except subprocess.CalledProcessError:
    print ('Ping %s failed' % dst_ip, file=sys.stderr, flush=True)
    return False


def get_config_parameter (config_file, conf, parameter, default = None):
  try:
    return conf[parameter]
  except KeyError:
    if default != None:
      return default
    raise ConfigError ('Missing parameter "%s" in config file "%s"' % (parameter, config_file))


def mainloop (config_file):
  signal.signal(signal.SIGHUP, sighup_handler)

  try:
    while True:
      conf = read_config (config_file)

      username    = get_config_parameter (config_file, conf, 'username')
      password    = get_config_parameter (config_file, conf, 'password')
      regurl      = get_config_parameter (config_file, conf, 'regurl')
      retry_delay = get_config_parameter (config_file, conf, 'retry_delay', '60')
      ip4device   = get_config_parameter (config_file, conf, 'ip4device')
      ip6device   = get_config_parameter (config_file, conf, 'ip6device')

      (iplocal, ipremote, ip6local, ip6remote) = register_endpoint (regurl, username, password, ip4device, ip6device)

      try:
        while True:
          time.sleep (5)

          if do_ping ('', iplocal, ipremote) & do_ping ('6', ip6local, ip6remote):
              continue

          try:
            (iplocal, ipremote, ip6local, ip6remote) = register_endpoint (regurl, username, password, ip4device, ip6device)
          except SetLocalIPFailure as err:
            print (err.value, file=sys.stderr, flush=True)
            time.sleep (float (retry_delay))

      except PosixSigHUP:
        print ('Reread config', file=sys.stderr, flush=True)
  except SetLocalIPFailure as err:
    print (err.value, file=sys.stderr, flush=True)
    exit (1)
  except ConfigError as err:
    print (err.value, file=sys.stderr, flush=True)
    exit (1)

mainloop ('/etc/rf-dyn-ipip.conf')
